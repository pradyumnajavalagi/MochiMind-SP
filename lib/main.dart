import 'package:flutter/material.dart';
import 'package:mochi_mind_sp/pages/auth.dart';
import 'package:mochi_mind_sp/utils/auth_gate.dart';
import 'package:mochi_mind_sp/utils/navigation_wrapper.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart'; // <-- 1. IMPORT Firebase Core
import 'firebase_options.dart'; // <-- 2. IMPORT Firebase Options

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load();

  // --- 3. INITIALIZE Firebase ---
  // This uses the firebase_options.dart file generated by the FlutterFire CLI.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize Supabase as before
  await Supabase.initialize(
    url: dotenv.env['SUPABASE_URL']!,
    anonKey: dotenv.env['SUPABASE_ANON_KEY']!,
  );

  runApp(const FlashcardApp());
}

class FlashcardApp extends StatelessWidget {
  const FlashcardApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kanji Flashcards',
      theme: ThemeData(useMaterial3: true, colorSchemeSeed: Colors.deepPurple),
      home: const AuthGate(),
      debugShowCheckedModeBanner: false,
    );
  }
}

// The SessionWatcher class is no longer needed as AuthGate handles this logic.
// You can safely remove it if it's not used elsewhere.
class SessionWatcher extends StatefulWidget {
  const SessionWatcher({super.key});

  @override
  State<SessionWatcher> createState() => _SessionWatcherState();
}

class _SessionWatcherState extends State<SessionWatcher> {
  @override
  void initState() {
    super.initState();
    Supabase.instance.client.auth.onAuthStateChange.listen((event) {
      if(mounted) {
        setState(() {}); // Rebuild when auth state changes
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final session = Supabase.instance.client.auth.currentSession;
    return session == null ? const AuthPage() : const NavigationWrapper();
  }
}
